
R version 3.0.0 (2013-04-03) -- "Masked Marvel"
Copyright (C) 2013 The R Foundation for Statistical Computing
Platform: x86_64-unknown-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "compiler"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('compiler')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("compile")
> ### * compile
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: compile
> ### Title: Byte Code Compiler
> ### Aliases: compile cmpfun cmpfile loadcmp disassemble enableJIT
> ###   compilePKGS getCompilerOption setCompilerOptions
> ### Keywords: programming
> 
> ### ** Examples
> 
> # a simple example
> f <- function(x) x+1
> fc <- cmpfun(f)
> fc(2)
[1] 3
> disassemble(fc)
list(.Code, list(7L, GETVAR.OP, 1L, LDCONST.OP, 2L, ADD.OP, 0L, 
    RETURN.OP), list(x + 1, x, 1))
> 
> # old R version of lapply
> la1 <- function(X, FUN, ...) {
+     FUN <- match.fun(FUN)
+     if (!is.list(X))
+ 	X <- as.list(X)
+     rval <- vector("list", length(X))
+     for(i in seq(along = X))
+ 	rval[i] <- list(FUN(X[[i]], ...))
+     names(rval) <- names(X)		  # keep `names' !
+     return(rval)
+ }
> # a small variation
> la2 <- function(X, FUN, ...) {
+     FUN <- match.fun(FUN)
+     if (!is.list(X))
+ 	X <- as.list(X)
+     rval <- vector("list", length(X))
+     for(i in seq(along = X)) {
+         v <- FUN(X[[i]], ...)
+         if (is.null(v)) rval[i] <- list(v)
+         else rval[[i]] <- v
+     }
+     names(rval) <- names(X)		  # keep `names' !
+     return(rval)
+ }
> # Compiled versions
> la1c <- cmpfun(la1)
> la2c <- cmpfun(la2)
> # some timings
> x <- 1:10
> y <- 1:100
> ## Don't show: 
> for (i in 1:10000) lapply(x, is.null)
> for (i in 1:10000) la1(x, is.null)
> for (i in 1:10000) la1c(x, is.null)
> for (i in 1:10000) la2(x, is.null)
> for (i in 1:10000) la2c(x, is.null)
> for (i in 1:1000) lapply(y, is.null)
> for (i in 1:1000) la1(y, is.null)
> for (i in 1:1000) la1c(y, is.null)
> for (i in 1:1000) la2(y, is.null)
> for (i in 1:1000) la2c(y, is.null)
> ## End Don't show
> 
> 
> ### * <FOOTER>
> ###
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  3.745 0.035 13.59 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
